{"version":3,"sources":["Components/Navbar.js","Components/Card.js","Components/Pages.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","style","color","Cards","time_coverter","num","Math","floor","relative_time","now","Date","secondsSinceEpoch","round","getTime","moment","unix","fromNow","dataList","this","props","data","length","map","d","key","id","marginTop","borderRadius","backgroundColor","phase","border","fontSize","name","startTimeSeconds","format","durationSeconds","type","display","relativeTimeSeconds","React","Component","Pages","PageNumber","i","totalPages","push","console","log","number","background","onClick","paginate","to","App","state","search","currentPage","postPerPage","totalPosts","onSearch","e","setState","target","value","axios","get","then","res","result","filter","catch","error","lastIndex","firstIndex","filteredData","slice","toLowerCase","includes","onChange","placeholder","marginLeft","marginRight","Card","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be9b53d5.chunk.js","sourcesContent":["import React from \"react\";\nconst Navbar =()=>{\n    return(\n        <nav>\n            <div className=\"nav-wrapper teal accent-2\">\n                <span className=\"brand-logo center\" ><b style={{color:\"black\"}}>Codeforces Contest Detail</b></span>\n            </div>\n        </nav>\n    )\n}\nexport default Navbar","import React from \"react\";\nimport moment from \"moment\";\n\nclass Cards extends React.Component{\n    time_coverter =(num)=>{\n        const hours = Math.floor(num / 3600);\n        num%=3600;\n        const minutes = num % 60;\n        return hours + \"Hr \" + minutes +\"Min\";\n    }\n    relative_time = (num)=>{\n        const now =new Date()\n        const secondsSinceEpoch = Math.round(now.getTime() / 1000) -num\n        return moment.unix(secondsSinceEpoch).fromNow()\n    }\n    render() {\n        const dataList = (this.props.data.length)?(\n            this.props.data.map(d=>{\n                return(\n                    <div className=\"col s12 m6 l6\"  key={d.id}>\n                        <div className=\"card z-depth-4\" style={{marginTop:20 ,borderRadius:\"40px 20px\", backgroundColor:\"#d2d2cf\"}}>\n                            <div className=\"card-stacked\">\n                                <div className=\"row\" style={{backgroundColor:\"eee4e1\"}}>\n                                    {(d.phase===\"BEFORE\"||d.phase===\"CODING\")&&\n                                        <div>\n                                             <div className=\"col s6 left\" style={{border:\"0px solid white\"}}>\n                                        <p style={{fontSize:\"16pxx\"}} ><b>{d.name}</b></p>\n                                                 {/*<p style={{fontSize:\"16pxx\"}} >{d.name.length}</p>*/}\n                                    </div>\n\n                                         <span className=\" col s2 right card-panel pull-s2 light-green accent-3 badge center\">On</span>\n                                            </div>\n\n                                    }\n                                    {d.phase!==\"BEFORE\"&&d.phase!==\"CODINF\"&&\n                                    <div className=\"col s12 left\" style={{border:\"0px solid white\"}}>\n                                        <p style={{fontSize:\"16pxx\"}} ><b>{d.name}</b></p>\n                                        {/*<p style={{fontSize:\"16pxx\"}} >{d.name.length}</p>*/}\n                                    </div>\n                                    }\n                                </div>\n                                <div className=\"row\" style={{marginTop:-20}}>\n                                    <div className=\"col s4\">\n                                        <ul>\n                                            <li className=\"condensed light\">Started On</li>\n                                            <p><b>{moment.unix(d.startTimeSeconds).format('MMMM Do YYYY, h:mm:ss a')}</b></p>\n\n                                        </ul>\n                                    </div>\n                                    <div className=\"col s4\">\n                                         <ul>\n                                            <li className=\"condensed light\">Duration</li>\n                                             <p><b>{this.time_coverter(d.durationSeconds)}</b></p>\n\n                                        </ul>\n                                    </div>\n                                    <div className=\"col s4\">\n                                         <ul>\n                                            <li className=\"condensed light\">Type</li>\n                                             <p><b>{d.type}</b></p>\n\n                                        </ul>\n                                    </div>\n\n                                </div>\n                                {(d.phase===\"BEFORE\"||d.phase===\"CODING\")&&\n                                    <div className=\"row card-action\" style={{marginTop:-26}} >\n                                     <div className=\"col s12 push-s2\" style={{marginTop:-10}}>\n                                         <div className=\"col s12 pull-s3\" style={{display:\"inline\"}}>\n                                             <p className=\"condensed light s6\">Until Coming <b>{this.relative_time(d.relativeTimeSeconds)}</b></p>\n                                         </div>\n\n                                    </div>\n                                </div>\n                                }\n                                {(d.phase!==\"BEFORE\"&&d.phase!==\"CODING\")&&\n                                <div className=\"row card-action\" style={{marginTop:-26}}>\n                                     <div className=\"col s12 push-s2\" style={{marginTop:-10}}>\n                                         <div className=\"col s12 pull-s3\" style={{display:\"inline\"}}>\n                                             <p className=\"condensed light s6\">Before Registeration <b>{this.relative_time(d.relativeTimeSeconds)}</b></p>\n                                         </div>\n\n                                    </div>\n                                </div>\n                                }\n\n                            </div>\n                        </div>\n                    </div>\n\n                )\n            })\n        ):(\n            <div>\n            </div>\n        );\n        return(\n            <div>\n\n                <div className=\"row\" style={{marginTop:50}} >\n                        {dataList}\n                </div>\n            </div>\n)\n    }\n}\nexport default Cards","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nconst Pages =(props)=>{\n    const PageNumber =[]\n    for(let i=1;i<=props.totalPages;i++){\n        PageNumber.push(i);\n    }\n    console.log(props.totalPages)\n    return (\n    <div className=\"nav-wrapper row \">\n      <ul className='pagination center' style={{marginTop:10}}>\n        {PageNumber.map(number => (\n          <li key={number} className='waves-effect' style={{background:\"white\"}}>\n              <Link onClick={()=>props.paginate(number)} className='page-link'to=\"/\">{number}</Link>\n          </li>\n        ))}\n\n      </ul>\n    </div>\n    )\n}\nexport default Pages\n\n","import React from 'react';\nimport Navbar from \"./Components/Navbar\";\nimport axios from 'axios';\nimport Cards from \"./Components/Card\";\nimport Pages from \"./Components/Pages\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nclass App extends React.Component{\n    state={\n        search:\"\",\n        data:[],\n        currentPage:1,\n        postPerPage:50,\n        totalPosts:null,\n    };\n    componentDidMount() {\n        axios.get('https://codeforces.com/api/contest.list')\n            .then((res)=>{\n                const dataList = res.data.result.filter(data=>{\n                    return data.name.length<=83\n                })\n                this.setState({\n                    data:dataList,\n                    totalPosts:dataList.length\n                });\n            })\n            .catch((error)=>{\n                console.log(error)\n            })\n    }\n    onSearch = (e)=>{\n        this.setState({\n                search:e.target.value\n        })\n\n    }\n    render() {\n        const {currentPage,postPerPage,totalPosts} = this.state\n        const lastIndex=currentPage*postPerPage\n        const firstIndex =lastIndex-postPerPage\n        const currentPost =this.state.data.slice(firstIndex,lastIndex)\n        const totalPages = totalPosts/postPerPage\n        const paginate=(number)=>{\n                this.setState({\n                    currentPage: number,\n                    search:\"\",\n                })\n        }\n        let filteredData=currentPost.filter(data=>{\n                return data.name.toLowerCase().includes(this.state.search.toLowerCase())\n        })\n        return(\n            <BrowserRouter>\n            <div style={{backgroundColor:\"#252422\"}}>\n                <Navbar/>\n                <div className=\"row container\">\n                    <div className=\"col center s10 push-s1 white\" style={{border:\"2px solid white\",marginTop:20,borderRadius:\"10px\"}} >\n                        <input type=\"text\" onChange={this.onSearch} placeholder=\"Search...\"/>\n                    </div>\n                </div>\n                <div style={{marginLeft:70,marginRight:70,marginTop:-50}}>\n                    <Cards data={filteredData}/>\n                </div>\n                <Pages totalPages={totalPages} paginate={paginate}/>\n            </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}